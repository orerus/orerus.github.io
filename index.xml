<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Orerus blog</title><link>https://orerus.github.io/</link><description>Recent content on Orerus blog</description><generator>Hugo -- gohugo.io</generator><language>ja-JA</language><lastBuildDate>Tue, 21 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://orerus.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>ネーブルのマイレビ サポートページ</title><link>https://orerus.github.io/about_app_my_revi/</link><pubDate>Wed, 22 May 2024 00:04:36 +0900</pubDate><guid>https://orerus.github.io/about_app_my_revi/</guid><description>サポートページ こちらは「ネーブルのマイレビ」アプリのサポートページです。 アプリに関する問い合わせは 作者のTwitter 宛にDMをいただくか、</description><content>
&lt;img src="https://orerus.github.io/img/nerble_myrevi_full.png" alt="cover" class="center" style="border-radius: 8px;" />
&lt;h1 id="サポートページ">サポートページ&lt;/h1>
&lt;p>こちらは「ネーブルのマイレビ」アプリのサポートページです。&lt;/p>
&lt;p>アプリに関する問い合わせは &lt;a href="https://x.com/orerus">作者のTwitter&lt;/a> 宛にDMをいただくか、またはこちらのメールアドレス 「raisuta+my_revi★gmail.com」（★を＠に変えて） へメールにてご連絡ください。&lt;/p>
&lt;h2 id="目次">目次&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%83%9A%E3%83%BC%E3%82%B8">サポートページ&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E7%9B%AE%E6%AC%A1">目次&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%81%93%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">このアプリについて&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%83%97%E3%83%A9%E3%82%A4%E3%83%90%E3%82%B7%E3%83%BC%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC%E3%81%8A%E3%82%88%E3%81%B3%E5%88%A9%E7%94%A8%E8%A6%8F%E7%B4%84">プライバシーポリシーおよび利用規約&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE%E8%BF%BD%E5%8A%A0%E6%96%B9%E6%B3%95">レビューの追加方法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE%E6%A4%9C%E7%B4%A2%E6%96%B9%E6%B3%95">レビューの検索方法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%80%A3%E7%B5%A1%E5%85%88">連絡先&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="このアプリについて">このアプリについて&lt;/h2>
&lt;p>ネーブルのマイレビは、あなたが購入・体験した商品や施設のレビューを自分用に記録できるアプリです。&lt;/p>
&lt;p>スーパーで「どのメーカーのチーズが美味しかったっけ？」と悩むことはありませんか？ネーブルのマイレビを使えば、そんな悩みも解消されます！&lt;/p>
&lt;h2 id="プライバシーポリシーおよび利用規約">プライバシーポリシーおよび利用規約&lt;/h2>
&lt;p>こちらの&lt;a href="https://orerus.net/privacypolicy_app_myrevi/">プライバシーポリシーおよび利用規約&lt;/a>を参照ください&lt;/p>
&lt;h2 id="レビューの追加方法">レビューの追加方法&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>手順1. 右下のプラスボタンを押す&lt;/th>
&lt;th>手順2. レビューの情報を入力する&lt;/th>
&lt;th>手順3. 右下の追加ボタンを押す&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/my_revi_about_1_1.png" alt="右下のプラスボタンを押す" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/my_revi_about_1_2.png" alt="レビュー情報を入力する" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/my_revi_about_1_3.png" alt="右下の追加ボタンを押す" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="レビューの検索方法">レビューの検索方法&lt;/h2>
&lt;table>
&lt;tr>
&lt;th>カテゴリで探す&lt;/th>
&lt;th>キーワードで探す&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/my_revi_about_2_1.png" alt="カテゴリを選択する" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/my_revi_about_2_2.png" alt="キーワードを入力して完了ボタンを押す" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="連絡先">連絡先&lt;/h2>
&lt;p>アプリに関する問い合わせは &lt;a href="https://x.com/orerus">作者のTwitter&lt;/a> 宛にDMをいただくか、またはこちらのメールアドレス 「raisuta+my_revi★gmail.com」（★を＠に変えて） へメールにてご連絡ください。&lt;/p></content></item><item><title>ネーブルのマイレビ プライバシーポリシー及び利用規約</title><link>https://orerus.github.io/privacypolicy_app_myrevi/</link><pubDate>Tue, 21 May 2024 01:11:57 +0900</pubDate><guid>https://orerus.github.io/privacypolicy_app_myrevi/</guid><description>プライバシーポリシー 広告について 本アプリでは、広告配信ツールとしてAdMob(Google Inc.)を使用しており、AdMobがご利用者の情</description><content>&lt;h1 id="プライバシーポリシー">プライバシーポリシー&lt;/h1>
&lt;h2 id="広告について">広告について&lt;/h2>
&lt;p>本アプリでは、広告配信ツールとしてAdMob(Google Inc.)を使用しており、AdMobがご利用者の情報を自動取得する場合がございます。&lt;/p>
&lt;p>取得する情報、利用目的、第三者への提供等につきましては、以下の広告配信事業者のアプリケーション・プライバシーポリシーのリンクよりご確認ください。&lt;/p>
&lt;p>Google 広告に関するポリシー&lt;br>
&lt;a href="https://policies.google.com/technologies/ads?hl=ja">https://policies.google.com/technologies/ads?hl=ja&lt;/a>&lt;/p>
&lt;h2 id="利用状況解析ついて">利用状況解析ついて&lt;/h2>
&lt;p>本アプリでは、今後の開発の参考とするため、アプリの利用状況データを収集するツールとしてFirebase(Google Inc.)を使用しており、Firebaseがご利用者の情報を自動取得する場合がございます。&lt;/p>
&lt;p>取得する情報、利用目的、第三者への提供等につきましては、以下のGoogleプライバシーポリシーのリンクよりご確認ください。&lt;/p>
&lt;p>Google プライバシーポリシー&lt;br>
&lt;a href="https://policies.google.com/privacy?hl=ja">https://policies.google.com/privacy?hl=ja&lt;/a>&lt;/p>
&lt;h1 id="利用規約">利用規約&lt;/h1>
&lt;p>この利用規約（以下「本規約」といいます。）は、ネーブルのマイレビ（以下「本アプリ」といいます。）の利用条件を定めるものです。本アプリを利用することで、利用者は本規約に同意したものとみなされます。
また、本規約の内容は、必要に応じて変更されることがあります。&lt;/p>
&lt;h2 id="利用条件">利用条件&lt;/h2>
&lt;p>本アプリは、個人利用のみを目的としています。商業目的での利用は禁止されています。また、法律に違反する行為や、他者の権利を侵害する行為は禁止されています。&lt;/p>
&lt;h2 id="責任の制限">責任の制限&lt;/h2>
&lt;p>ネーブルのマイレビは、提供されるサービスの利用により発生するいかなる損害についても責任を負いません。アプリの不具合やデータの喪失などによる直接的、間接的、特別な損害について、一切の責任を免除されるものとします。本アプリを使用することにより、ユーザーはこの免責条項に同意したものとみなされます。&lt;/p>
&lt;h2 id="広告とサードパーティのリンク">広告とサードパーティのリンク&lt;/h2>
&lt;p>本アプリには広告が表示される場合があります。また、サードパーティのリンクが含まれることがありますが、その内容については一切の責任を負いません。&lt;/p>
&lt;h1 id="更新履歴">更新履歴&lt;/h1>
&lt;p>2024-05-21 初版&lt;br>
2024-05-21 追記: 利用規約を追加&lt;/p></content></item><item><title>Flutter×Firebase Crashlyticsで非致命（non-fatal）エラーを記録する</title><link>https://orerus.github.io/posts/20230321_2/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://orerus.github.io/posts/20230321_2/</guid><description>この記事は何？ FlutterアプリでのFirebase Crashlyticsの設定方法は公式サイトや先達の方の素晴らしい記事が非常に参考にな</description><content>&lt;h2 id="この記事は何">この記事は何？&lt;/h2>
&lt;p>FlutterアプリでのFirebase Crashlyticsの設定方法は&lt;a href="https://firebase.google.com/docs/crashlytics/get-started?platform=flutter">公式サイト&lt;/a>や先達の方の素晴らしい記事が非常に参考になりましたが、公式サイトを見ても非致命（non-fatal）エラーに関しての記述が分かりづらかったのでメモしておきます。&lt;/p>
&lt;h2 id="困ったこと非致命non-fatalエラーが致命fatalエラーとして記録されてしまう">困ったこと：非致命（non-fatal）エラーが致命（fatal）エラーとして記録されてしまう&lt;/h2>
&lt;p>公式サイトの &lt;code>Get Startd&lt;/code> のページにある記述通りに設定すると非致命（non-fatal）エラーも致命（fatal）エラーとして記録されてしまいました。&lt;/p>
&lt;p>よく見ると非致命エラーに関しては &lt;a href="https://firebase.google.com/docs/crashlytics/get-started?platform=flutter">&lt;code>Get Startd&lt;/code>&lt;/a> ではなく &lt;a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=flutter">&lt;code>Customize crash reports&lt;/code>&lt;/a> の方に記載があったのですが、こちらを見ても非同期エラーの非致命エラーについての記載がなく困ってました。&lt;/p>
&lt;h2 id="解決方法">解決方法&lt;/h2>
&lt;p>まず結論から記載しておくと、以下のように記述しておけば致命エラー、非致命エラーがきちんと分かれて記録されました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">Future&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> main() &lt;span style="color:#66d9ef">async&lt;/span> {
WidgetsFlutterBinding.ensureInitialized();
&lt;span style="color:#66d9ef">await&lt;/span> Firebase.initializeApp(
options: DefaultFirebaseOptions.currentPlatform,
);
FlutterError.onError &lt;span style="color:#f92672">=&lt;/span> (errorDetails) {
FirebaseCrashlytics.instance.recordFlutterError(errorDetails);
};
PlatformDispatcher.instance.onError &lt;span style="color:#f92672">=&lt;/span> (error, stack) {
FirebaseCrashlytics.instance.recordError(error, stack, fatal: &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
};
runApp(MyApp());
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>※実際に設定する際は必ず意図通りに動作するか確認ください&lt;/p>
&lt;h2 id="解説というか補足">解説というか補足&lt;/h2>
&lt;p>Crashlytics上で記録されるエラーには以下の２種類があります。(AndroidにはANRがありますがここでは省略します)&lt;/p>
&lt;ol>
&lt;li>クラッシュを伴う致命的なエラー&lt;/li>
&lt;li>クラッシュを伴わない非致命的なエラー（補足されない例外）&lt;/li>
&lt;/ol>
&lt;p>これらをCrashlytics上で分けて記録するためにはそれ用の設定を行う必要があります。&lt;/p>
&lt;p>また、Flutter×Firebase Crashlyticsでは同期エラーと非同期エラーで設定が２箇所に分かれます。&lt;/p>
&lt;h3 id="同期エラーの捕捉">同期エラーの捕捉&lt;/h3>
&lt;p>&lt;a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=flutter#report-uncaught-exceptions">公式&lt;/a>にあるように、致命エラーを補足する設定は以下になります。なお、自分の環境では非致命エラーも致命エラーとして記録されました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> FlutterError.onError &lt;span style="color:#f92672">=&lt;/span> (errorDetails) {
FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>非致命エラー &lt;code>も&lt;/code> 捕捉するには以下の記述に置き換えます。
こちらで致命、非致命が分かれて記録されるようになりました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> FlutterError.onError &lt;span style="color:#f92672">=&lt;/span> (errorDetails) {
FirebaseCrashlytics.instance.recordFlutterError(errorDetails);
};
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="非同期エラーの捕捉">非同期エラーの捕捉&lt;/h3>
&lt;p>&lt;a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=flutter#report-uncaught-exceptions">公式&lt;/a>にあるように、非同期エラー（Flutterフレームワークでキャッチされないエラー）を捕捉する設定は以下になります。
ただし、こちらも自分の環境では非致命、致命問わず致命エラーとして記録されました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> PlatformDispatcher.instance.onError &lt;span style="color:#f92672">=&lt;/span> (error, stack) {
FirebaseCrashlytics.instance.recordError(error, stack, fatal: &lt;span style="color:#66d9ef">true&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以下に変えると、非同期エラーについても致命、非致命が分かれて記録されるようになりました。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart"> PlatformDispatcher.instance.onError &lt;span style="color:#f92672">=&lt;/span> (error, stack) {
FirebaseCrashlytics.instance.recordError(error, stack, fatal: &lt;span style="color:#66d9ef">false&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="確認用widgetのサンプル">確認用Widgetのサンプル&lt;/h2>
&lt;p>&lt;a href="https://qiita.com/kazutxt/items/a710115f9f9315002e90">先達の方の記事&lt;/a>を参考にさせていただき、そちらに同期/非同期の観点を追加したものになります。&lt;/p>
&lt;img src="https://orerus.github.io/img/20230321_2/Screenshot.png" alt="step1" class="center" style="border-radius: 8px;width: 300px;" />
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dart" data-lang="dart">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DebugCrashTest&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> StatelessWidget {
&lt;span style="color:#66d9ef">const&lt;/span> DebugCrashTest({Key&lt;span style="color:#f92672">?&lt;/span> key}) &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">super&lt;/span>(key: key);
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>override
Widget build(BuildContext context) {
&lt;span style="color:#66d9ef">return&lt;/span> Scaffold(
appBar: AppBar(
title: Text(&lt;span style="color:#e6db74">&amp;#34;crash test&amp;#34;&lt;/span>),
),
body: Center(
child: Column(
mainAxisAlignment: MainAxisAlignment.center,
children: &lt;span style="color:#f92672">&amp;lt;&lt;/span>Widget&lt;span style="color:#f92672">&amp;gt;&lt;/span>[
&lt;span style="color:#75715e">// 例外を発生させるボタン 非同期
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ElevatedButton(
onPressed: () &lt;span style="color:#66d9ef">async&lt;/span> {
FirebaseCrashlytics.instance.log(&lt;span style="color:#e6db74">&amp;#39;ExceptionLog async&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">throw&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;MyException&amp;#34;&lt;/span>);
},
child: &lt;span style="color:#66d9ef">const&lt;/span> Text(&lt;span style="color:#e6db74">&amp;#39;Throw Error async (non-fatal)&amp;#39;&lt;/span>),
),
&lt;span style="color:#75715e">// 例外を発生させるボタン 同期
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ElevatedButton(
onPressed: () {
FirebaseCrashlytics.instance.log(&lt;span style="color:#e6db74">&amp;#39;ExceptionLog sync&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">throw&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;MyException&amp;#34;&lt;/span>);
},
child: &lt;span style="color:#66d9ef">const&lt;/span> Text(&lt;span style="color:#e6db74">&amp;#39;Throw Error sync (non-fatal)&amp;#39;&lt;/span>),
),
&lt;span style="color:#75715e">// アプリをクラッシュさせるボタン 非同期
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ElevatedButton(
onPressed: () &lt;span style="color:#66d9ef">async&lt;/span> {
FirebaseCrashlytics.instance.log(&lt;span style="color:#e6db74">&amp;#39;CrashLog async&amp;#39;&lt;/span>);
FirebaseCrashlytics.instance.crash();
},
child: &lt;span style="color:#66d9ef">const&lt;/span> Text(&lt;span style="color:#e6db74">&amp;#39;Crash async (fatal)&amp;#39;&lt;/span>),
),
&lt;span style="color:#75715e">// アプリをクラッシュさせるボタン 同期
&lt;/span>&lt;span style="color:#75715e">&lt;/span> ElevatedButton(
onPressed: () {
FirebaseCrashlytics.instance.log(&lt;span style="color:#e6db74">&amp;#39;CrashLog sync&amp;#39;&lt;/span>);
FirebaseCrashlytics.instance.crash();
},
child: &lt;span style="color:#66d9ef">const&lt;/span> Text(&lt;span style="color:#e6db74">&amp;#39;Crash sync (fatal)&amp;#39;&lt;/span>),
),
],
),
),
);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="さいごに">さいごに&lt;/h2>
&lt;p>記事に不明点や誤りなどありましたら&lt;a href="https://twitter.com/orerus">Twitter&lt;/a>までDMやリプをお願いします🙇‍♂‍&lt;/p></content></item><item><title>Flutterでbuildを繰り返していると「File name too long」と出る問題</title><link>https://orerus.github.io/posts/20230321_1/</link><pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate><guid>https://orerus.github.io/posts/20230321_1/</guid><description>FlutterでAndroidアプリを繰り返しrunしていると突然コケることがある こんな感じで、突如 File name too long を吐き出して以降コケ続けることが</description><content>&lt;h2 id="flutterでandroidアプリを繰り返しrunしていると突然コケることがある">FlutterでAndroidアプリを繰り返しrunしていると突然コケることがある&lt;/h2>
&lt;p>こんな感じで、突如 &lt;code>File name too long&lt;/code> を吐き出して以降コケ続けることがあります。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">* What went wrong:
Execution failed for task &amp;#39;:app:copyFlutterAssetsLocalDebug&amp;#39;.
&amp;gt; Could not copy file &amp;#39;/hoge/fuga/…/android/app/build/intermediates/flutter/{variant}/flutter_assets/android/app/build/intermediates/merged_assets/{variant}/out/flutter_assets/android/app/build/intermediates/merged_assets/…/piyo&amp;#39; to &amp;#39;/hoge/fuga/…/android/app/build/intermediates/flutter/{variant}/flutter_assets/android/app/build/intermediates/merged_assets/{variant}/out/flutter_assets/android/app/build/intermediates/merged_assets/…/piyo&amp;#39;.
&amp;gt; /hoge/fuga/…/android/app/build/intermediates/flutter/{variant}/flutter_assets/android/app/build/intermediates/merged_assets/{variant}/out/flutter_assets/android/app/build/intermediates/merged_assets/…/piyo (File name too long)
* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
* Get more help at https://help.gradle.org
BUILD FAILED in 1m 48s
Exception: Gradle task assembleLocalDebug failed with exit code 1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>手元の環境では &lt;a href="https://chromium.googlesource.com/external/github.com/flutter/flutter/+/refs/tags/v1.12.10/packages/flutter_tools/gradle/flutter.gradle#652">gradle の copyFlutterAssetsTask&lt;/a> のタイミングでコケていました。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>よくわかりません🙏&lt;br>
ただ、下記ツイートにあるようにbuild回数を重ねる事にbuildディレクトリが深くなっていっているので、buildの都度ディレクトリが掘られる -&amp;gt; file name too long の流れっぽいことは確かだと思われます。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">cache削除してやり直した1回目と2回目の結果がこちら。flutter_assets/android 配下がループしてるっぽいけど原因を追う気力が出ぬ &lt;a href="https://t.co/VgVHhMJ7dL">pic.twitter.com/VgVHhMJ7dL&lt;/a>&lt;/p>&amp;mdash; スク (@orerus) &lt;a href="https://twitter.com/orerus/status/1637115808890621952?ref_src=twsrc%5Etfw">March 18, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="とりあえずの対応策">とりあえずの対応策&lt;/h2>
&lt;p>根本原因は分からないので場当たり的な方法になりますが、手っ取り早くやるなら下記コマンドでbuildディレクトリを削除して再度runすればOK。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">rm -rf android/app/build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>自分は都度コマンドを叩くのが面倒だった為、AndroidStudioの機能を使って以下のようなシェルスクリプトをbuildの前に実行するようにして凌いでいます。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
DIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;android/app/build/intermediates/flutter/{variant}/flutter_assets/android&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -d &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
rm -rf &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
DIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;android/app/build/intermediates/merged_assets/{variant}/out/flutter_assets/android&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -d &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
rm -rf &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$DIR&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>※{variant}の部分は各自の環境に読み替えてください&lt;br>
※とりあえず上の２つのディレクトリを消しておけば大丈夫そうでした&lt;/p>
&lt;h3 id="一応androidstudioの設定手順も">一応AndroidStudioの設定手順も&lt;/h3>
&lt;table>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/20230321_1/remove_build_1.png" alt="step1" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/20230321_1/remove_build_2.png" alt="step2" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/20230321_1/remove_build_3.png" alt="step3" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="さいごに">さいごに&lt;/h2>
&lt;p>もし根本原因＆解決策がお分かりの方いらっしゃいましたら是非&lt;a href="https://twitter.com/orerus/status/1637114770691346434?s=20">Twitter&lt;/a>の方にDMかリプください🙇‍♂‍&lt;/p></content></item><item><title>ネーブルの吉方位 サポートページ</title><link>https://orerus.github.io/about_app_direction_checker/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://orerus.github.io/about_app_direction_checker/</guid><description>サポートページ こちらは「ネーブルの吉方位」アプリのサポートページです。 アプリに関する問い合わせは 作者のTwitter 宛にDMをいただくか、ま</description><content>&lt;h1 id="サポートページ">サポートページ&lt;/h1>
&lt;p>こちらは「ネーブルの吉方位」アプリのサポートページです。&lt;/p>
&lt;p>アプリに関する問い合わせは &lt;a href="https://twitter.com/orerus">作者のTwitter&lt;/a> 宛にDMをいただくか、またはこちらのメールアドレス 「raisuta+direction_checker★gmail.com」（★を＠に変えて） へメールにてご連絡ください。&lt;/p>
&lt;h2 id="目次">目次&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%83%9A%E3%83%BC%E3%82%B8">サポートページ&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#%E7%9B%AE%E6%AC%A1">目次&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%81%93%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">このアプリについて&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E8%87%AA%E5%88%86%E3%81%AE%E4%BD%8D%E7%BD%AE%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AE%E4%BB%95%E6%96%B9">自分の位置の変更の仕方&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%96%B9%E4%BD%8D%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AE%E4%BB%95%E6%96%B9">方位の変更の仕方&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E6%96%BD%E8%A8%AD%E3%81%AE%E6%A4%9C%E7%B4%A2%E6%96%B9%E6%B3%95">施設の検索方法&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%80%A3%E7%B5%A1%E5%85%88">連絡先&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="このアプリについて">このアプリについて&lt;/h2>
&lt;p>好きな位置から吉方位に含まれる施設を調べることができるアプリです。&lt;br>
施設名で検索し、吉方位の中に含まれているかを確認することができます。&lt;/p>
&lt;p>自身の位置は現在地ボタンを押すか、現在地のピンを長押し後ドラッグで移動させることができます。&lt;/p>
&lt;h2 id="自分の位置の変更の仕方">自分の位置の変更の仕方&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法1. 現在地ボタンを押す&lt;/th>
&lt;th>方法2. ピンを直接動かす&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_self_position_1.png" alt="自分の位置移動手順1" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_self_position_2.png" alt="自分の位置移動手順2" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="方位の変更の仕方">方位の変更の仕方&lt;/h2>
&lt;table>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_houi_1.png" alt="方位変更手順1" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_houi_2.png" alt="方位変更手順2" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="施設の検索方法">施設の検索方法&lt;/h2>
&lt;table>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_search_1.png" alt="施設検索手順1" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_search_2.png" alt="施設検索手順2" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_search_3.png" alt="施設検索手順3" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;td>
&lt;img src="https://orerus.github.io/img/nable_search_4.png" alt="施設検索手順4" class="center" style="border-radius: 8px;" />
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h2 id="連絡先">連絡先&lt;/h2>
&lt;p>アプリに関する問い合わせは &lt;a href="https://twitter.com/orerus">作者のTwitter&lt;/a> 宛にDMをいただくか、またはこちらのメールアドレス 「raisuta+direction_checker★gmail.com」（★を＠に変えて） へメールにてご連絡ください。&lt;/p></content></item><item><title>ネーブルの吉方位 プライバシーポリシー</title><link>https://orerus.github.io/privacypolicy_app_direction_checker/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://orerus.github.io/privacypolicy_app_direction_checker/</guid><description>プライバシーポリシー 広告について 本アプリでは、広告配信ツールとしてAdMob(Google Inc.)を使用しており、AdMobがご利用者の情</description><content>&lt;h1 id="プライバシーポリシー">プライバシーポリシー&lt;/h1>
&lt;h2 id="広告について">広告について&lt;/h2>
&lt;p>本アプリでは、広告配信ツールとしてAdMob(Google Inc.)を使用しており、AdMobがご利用者の情報を自動取得する場合がございます。&lt;/p>
&lt;p>取得する情報、利用目的、第三者への提供等につきましては、以下の広告配信事業者のアプリケーション・プライバシーポリシーのリンクよりご確認ください。&lt;/p>
&lt;p>Google 広告に関するポリシー&lt;br>
&lt;a href="https://policies.google.com/technologies/ads?hl=ja">https://policies.google.com/technologies/ads?hl=ja&lt;/a>&lt;/p>
&lt;h2 id="利用状況解析ついて">利用状況解析ついて&lt;/h2>
&lt;p>本アプリでは、今後の開発の参考とするため、アプリの利用状況データを収集するツールとしてFirebase(Google Inc.)を使用しており、Firebaseがご利用者の情報を自動取得する場合がございます。&lt;/p>
&lt;p>取得する情報、利用目的、第三者への提供等につきましては、以下のGoogleプライバシーポリシーのリンクよりご確認ください。&lt;/p>
&lt;p>Google プライバシーポリシー&lt;br>
&lt;a href="https://policies.google.com/privacy?hl=ja">https://policies.google.com/privacy?hl=ja&lt;/a>&lt;/p></content></item><item><title>About</title><link>https://orerus.github.io/about/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://orerus.github.io/about/</guid><description>Hello World!! どうも、 orerus と申します。 主に Android/Flutter/iOS アプリ開発を生業としています。 最近は主にAndroid/Flutterメインです。 元々はWeb/DB系エンジ</description><content>&lt;h1 id="hello-world">Hello World!!&lt;/h1>
&lt;p>どうも、 orerus と申します。&lt;/p>
&lt;p>主に Android/Flutter/iOS アプリ開発を生業としています。&lt;br>
最近は主にAndroid/Flutterメインです。&lt;/p>
&lt;p>元々はWeb/DB系エンジニアでした。&lt;/p>
&lt;p>適当に記事を書いていく予定です。&lt;/p>
&lt;p>SNS系は苦手な為更新頻度は低いですが、何かありましたら気軽にTwitterなどでDMください！&lt;/p>
&lt;hr>
&lt;p>&lt;a class="twitter-timeline" data-width="500" data-height="1000" data-theme="dark" href="https://twitter.com/orerus?ref_src=twsrc%5Etfw">Tweets by orerus&lt;/a> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>&lt;/p></content></item><item><title>開発をお手伝いさせていただいたプロットマッピングカメラアプリ「CALINT」がリリースされました</title><link>https://orerus.github.io/posts/introduce_calint/</link><pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate><guid>https://orerus.github.io/posts/introduce_calint/</guid><description>CALINTとは CALINT（カリント）とは、株式会社moegiよりリリースされた、いわゆるプロットマッピングカメラアプリです。 ※現在はiO</description><content>&lt;h2 id="calintとは">CALINTとは&lt;/h2>
&lt;p>CALINT（カリント）とは、株式会社moegiよりリリースされた、いわゆるプロットマッピングカメラアプリです。&lt;br>
※現在はiOSのみリリース済み&lt;/p>
&lt;p>カメラで撮影を行いながら、同時に地図や速度、カメラの向きや標高などを記録できます。&lt;br>
具体的には、mp4、csv、gpxファイルを同時に記録できるアプリになります。&lt;/p>
&lt;p>詳しくは、以下の公式サイト、および使用イメージを是非ご覧ください！&lt;/p>
&lt;p>公式サイト: &lt;a href="https://moegi.jp/calint/">CALINT&lt;/a>&lt;/p>
&lt;h2 id="使用イメージ">使用イメージ&lt;/h2>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/jFGsV8vfEAc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="CALINT 紹介動画">&lt;/iframe>
&lt;/div>
&lt;p>こちらの動画を見ていただければおおよそのアプリのイメージが掴んでいただけるかと思います！&lt;br>
ハイキングやドライブ、電車内・飛行機内からの撮影等、様々なシーンでご利用いただけるかと(^^)&lt;/p>
&lt;h2 id="開発時の話">開発時の話&lt;/h2>
&lt;p>諸事情により内部の作りの詳細についてはあまり記述できませんが、せっかくなので開発時の苦労話等を少しご紹介します&lt;/p>
&lt;h3 id="アーキテクチャについて">アーキテクチャについて&lt;/h3>
&lt;p>今回は&lt;a href="https://github.com/ReactorKit/ReactorKit">ReactorKit&lt;/a>を用いたFluxアーキテクチャを採用しました。&lt;/p>
&lt;p>理由としては、アプリの特性上、様々なトリガー（ユーザーのタップや、GPSのコールバック、ファイル保存時のコールバック等）で処理が走る為、トリガーに関わらず処理のフローを一方向に限定し、各処理の記述位置を明確にしてコードをシンプルにし、バグを減らしたかった為です。&lt;br>
（ただでさえ録画周りで原因不明なクラッシュが発生しやすい・・・）&lt;/p>
&lt;p>また、非同期での処理を前提とした構成にすることで、様々なトリガーによって処理が走った場合でも、自然とユーザー操作を邪魔しない（UIスレッドをブロックしない）作りにするという狙いもありました。&lt;/p>
&lt;h3 id="iosでの録画について">iOSでの録画について&lt;/h3>
&lt;p>iOSでのカメラを用いた録画方法については、Qiita等にいくつかの良質な記事が挙がっています。&lt;/p>
&lt;p>ただし、今回の要件として、カメラに映った映像をそのまま録画するのではなく、画面上に表示している地図や速度計等のViewも同時に記録する必要がありました。&lt;/p>
&lt;p>その場合、以下の２通りの録画方法を検討しました。&lt;/p>
&lt;ol>
&lt;li>カメラでキャプチャした映像にViewを合成し記録する&lt;/li>
&lt;li>デバイスに表示されているViewを丸ごと記録する&lt;/li>
&lt;/ol>
&lt;h4 id="1-カメラでキャプチャした映像にviewを合成し記録する">1. カメラでキャプチャした映像にViewを合成し記録する&lt;/h4>
&lt;p>こちらの方法についてまず試したところ、合成すべきViewの内容（地図や速度）が常に変化するものである為、毎フレーム合成し直す必要があり、処理が１フレームの時間内に収まらず、録画ファイルが明らかにコマ落ちしているような品質になってしまい、断念しました。&lt;br>
ただし、こちらの方法ではiOSが備えているカメラの手ぶれ補正機能を使えるという大きなメリットがある為、撮影内容のクオリティを求める場合はこちらの方法をお勧めします。&lt;/p>
&lt;h4 id="2-デバイスに表示されているviewを丸ごと記録する">2. デバイスに表示されているViewを丸ごと記録する&lt;/h4>
&lt;p>こちらは、iOS11から搭載されたスクリーンレコーディングとほぼ同じイメージです。（&lt;a href="https://gori.me/ios/ios11/96712">参考記事&lt;/a>）&lt;/p>
&lt;p>そして、嬉しいことに単純に撮影するだけであれば、&lt;a href="https://developer.apple.com/documentation/replaykit">ReplayKit&lt;/a>という上記のスクリーンレコーディングがアプリ内からできるツールが標準で用意されています。 （&lt;a href="https://qiita.com/akira108/items/babf68a3e7b37f3ca379">参考記事&lt;/a>）&lt;/p>
&lt;p>ただし、上記参考記事のようなシンプルな使い方を行った場合、撮影終了時に &lt;code>RPPreviewController&lt;/code> を呼び出してユーザーに保存またはシェアさせる、といったフローになる（プログラム側で勝手に保存できない）為、ReplayKitで撮影し渡されたbufferを &lt;code>AVAssetWriter&lt;/code> を用いて毎フレーム記録する、という方法を取っています。&lt;/p>
&lt;h3 id="replaykitを使った撮影">ReplayKitを使った撮影&lt;/h3>
&lt;p>これが、様々な要因でクラッシュします・・・&lt;br>
また、クラッシュした際に出てくるメッセージが &lt;code>Error Domain=com.apple.ReplayKit.RPRecordingErrorDomain Code=-5807 &amp;quot;Recording interrupted by multitasking and content resizing&amp;quot;&lt;/code> といったよく分からないものばかりです。&lt;br>
エラーコードっぽいものが出てますが、このコードの詳細についてはAppleのドキュメントに一切記載が無い為、非常に苦労しました・・・&lt;/p>
&lt;h3 id="iosシミュレータが使えない">iOSシミュレータが使えない&lt;/h3>
&lt;p>カメラ機能をフルに使ったアプリである為、シミュレータでの開発がほぼできず、 iPhone X 等の対応を実機でやらざるを得ず、こちらもまた苦労しました・・・&lt;/p>
&lt;h2 id="さいごに">さいごに&lt;/h2>
&lt;p>とりとめのない紹介になってしまいましたが、アプリ内容や開発話等、何かありましたらTwitter等で気軽に呼びかけていただければと思います！&lt;/p></content></item></channel></rss>